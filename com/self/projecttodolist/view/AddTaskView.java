/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.self.projecttodolist.view;

import com.self.projecttodolist.model.Task;
import com.self.projecttodolist.model.TaskComponent;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author anhnguyen
 */
public class AddTaskView extends javax.swing.JFrame {

    /**
     * Creates new form AddTaskView
     */
    private TaskComponent allTask;
    private String currentTaskType;
    private DefaultTableModel taskTable;

    public AddTaskView(String currentTaskType, TaskComponent allTask, DefaultTableModel taskTable) {
        this.currentTaskType = currentTaskType;
        this.allTask = allTask;
        this.taskTable = taskTable;
        initComponents();
        
        // Set window appears on middle of screen
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        taskName = new javax.swing.JTextField();
        addBtn = new javax.swing.JButton();
        date_chooser = new com.self.projecttodolist.components.toedter.calendar.JDateChooser();
        time_spinner = new JSpinner( new SpinnerDateModel() );
        AMPMSelector = new javax.swing.JComboBox<>();
        taskType = new javax.swing.JComboBox<>();
        addTaskViewLabel = new javax.swing.JLabel();
        taskTitleLabel = new javax.swing.JLabel();
        taskTypeLabel = new javax.swing.JLabel();
        taskDateLabel = new javax.swing.JLabel();
        taskTimeLabel = new javax.swing.JLabel();
        noteLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        noteField = new javax.swing.JTextArea();

        addBtn.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        AMPMSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AM", "PM" }));

        taskType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Home", "School", "Other" }));

        addTaskViewLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        addTaskViewLabel.setText("Add new task");

        taskTitleLabel.setText("Title");

        taskTypeLabel.setText("Type");

        taskDateLabel.setText("Date");

        taskTimeLabel.setText("Time");

        noteLabel.setText("Note");

        noteField.setColumns(20);
        noteField.setRows(5);
        jScrollPane1.setViewportView(noteField);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(taskDateLabel)
                            .addComponent(noteLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(date_chooser, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(taskTimeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(time_spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(AMPMSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addTaskViewLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(taskTitleLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(taskName, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(taskTypeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(taskType, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(182, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addTaskViewLabel)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(taskName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(taskTitleLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(taskTypeLabel)
                    .addComponent(taskType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(taskTimeLabel)
                        .addComponent(time_spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(AMPMSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(date_chooser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(taskDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(noteLabel)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        JSpinner.DateEditor timeEditor = new JSpinner.DateEditor(time_spinner, "h:mm");
        time_spinner.setEditor(timeEditor);
        time_spinner.setValue(new Date(0,0,0)); // will on

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        String name = taskName.getText();
        Date date = date_chooser.getDate();
        String note = noteField.getText();

        if (name.equals("") || date == null) {
            JOptionPane.showMessageDialog(null, "Task name and date cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            Calendar calForDateChooser = Calendar.getInstance();
            Calendar calForTimeSpinner = Calendar.getInstance();
            calForDateChooser.setTime(date);

            Date spinnerTime = (Date) time_spinner.getValue();

            String AMPM = (String) AMPMSelector.getSelectedItem();

            calForTimeSpinner.setTime(spinnerTime);

            int hourFromSpinner = calForTimeSpinner.get(Calendar.HOUR);
            if (AMPM.equals("PM") && hourFromSpinner <= 12) {
                hourFromSpinner = calForTimeSpinner.get(Calendar.HOUR) + 12;
            }

            int minFromSpinner = calForTimeSpinner.get(Calendar.MINUTE);
            calForDateChooser.set(Calendar.HOUR_OF_DAY, hourFromSpinner);
            calForDateChooser.set(Calendar.MINUTE, minFromSpinner);
            calForDateChooser.set(Calendar.SECOND, 0);
            calForDateChooser.set(Calendar.MILLISECOND, 0);

            Date finalDate = calForDateChooser.getTime();

            TaskComponent newTask = new Task(name, finalDate, new Date(), "Undone", "", note);

            String type = (String) taskType.getSelectedItem();
            switch (type) {
                case "Home":
                    newTask.setCategory("Home Task");
                    allTask.getComponent(0).add(newTask);
                    if (currentTaskType.equals("Home Tasks")) {
                        taskTable.addRow(new Object[]{newTask.getTitle(), newTask.getDate(), newTask.getStatus(), newTask.getCategory()});
                    }
                    break;
                case "School":
                    newTask.setCategory("School Task");
                    allTask.getComponent(1).add(newTask);
                    if (currentTaskType.equals("School Tasks")) {
                        taskTable.addRow(new Object[]{newTask.getTitle(), newTask.getDate(), newTask.getStatus(), newTask.getCategory()});
                    }
                    break;
                default:
                    newTask.setCategory("Other Task");
                    allTask.getComponent(2).add(newTask);
                    if (currentTaskType.equals("Other Tasks")) {
                        taskTable.addRow(new Object[]{newTask.getTitle(), newTask.getDate(), newTask.getStatus(), newTask.getCategory()});
                    }
                    break;
            }
            if (currentTaskType.equals("All Tasks")) {
                taskTable.setDataVector(allTask.toAllTaskGroupArray(), new String[]{"Title", "Date", "Status", "Category"});
            }

            float days = (finalDate.getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24);
            
            if (days >= 0 && days <= 7.0) {
                allTask.getComponent(3).add(newTask);
                if (currentTaskType.equals("Urgent Tasks")) {
                    taskTable.addRow(new Object[]{newTask.getTitle(), newTask.getDate(), newTask.getStatus(), newTask.getCategory()});
                }
            }
            this.setVisible(false);
        }

    }//GEN-LAST:event_addBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> AMPMSelector;
    private javax.swing.JButton addBtn;
    private javax.swing.JLabel addTaskViewLabel;
    private com.self.projecttodolist.components.toedter.calendar.JDateChooser date_chooser;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea noteField;
    private javax.swing.JLabel noteLabel;
    private javax.swing.JLabel taskDateLabel;
    private javax.swing.JTextField taskName;
    private javax.swing.JLabel taskTimeLabel;
    private javax.swing.JLabel taskTitleLabel;
    private javax.swing.JComboBox<String> taskType;
    private javax.swing.JLabel taskTypeLabel;
    private javax.swing.JSpinner time_spinner;
    // End of variables declaration//GEN-END:variables
}
